AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  DynamoDBTableName:
    Type: String
    Default: MyTable
    Description: Existing DynamoDB table name
  LambdaFunctionName:
    Type: String
    Default: MyLambdaFunction
    Description: Lambda function name
  ApiStageName:
    Type: String
    Default: dev
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: ApiStageName
      Description: My Custom API Gateway
    Metadata:
      SamResourceId: MyApi
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: DynamoDBFullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}
      - PolicyName: CloudWatchFullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
    Metadata:
      SamResourceId: MyLambdaExecutionRole
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Ref: LambdaFunctionName
      Handler: index.handler
      Runtime: nodejs18.x
      Role:
        Fn::GetAtt:
        - MyLambdaExecutionRole
        - Arn
      CodeUri: s3://sam-bucket-25102002/2f3f62591b03c12a2db62da7f9e9a28d
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME:
            Ref: DynamoDBTableName
      Events:
        PostEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /post
            Method: post
    Metadata:
      SamResourceId: MyLambdaFunction
Outputs:
  ApiGatewayInvokeURL:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/post
