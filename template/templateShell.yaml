AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  DynamoDBTableName:
    Type: String
    Default: ""
    Description: "Existing DynamoDB table name"

  LambdaFunctionName:
    Type: String
    Default: ""
    Description: "Lambda function name"

  ApiStageName:
    Type: String
    Default: "" 
    
  S3BucketName:
    Type: String
    Default: ""
    Description: "S3 Bucket for Lambda layers or packaged code"  

Resources:  
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
      Description: "My Custom API Gateway"

  MyLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: MyNodeLambdaLayer
      Content:
        S3Bucket: !Ref S3BucketName
        S3Key: lambda-layers/layer.zip
      CompatibleRuntimes:
        - nodejs18.x
    
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}"
        - PolicyName: CloudWatchFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt MyLambdaExecutionRole.Arn
      CodeUri: ../src
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableName
      Events:
        PostEvent:  
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /post
            Method: post
    Layers: 
       - !Ref MyLambdaLayer
       
Outputs:
  ApiGatewayInvokeURL:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/post"
      
